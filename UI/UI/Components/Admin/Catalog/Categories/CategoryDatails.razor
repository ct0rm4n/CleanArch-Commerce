@using Blazored.TextEditor
@using Core.Entities.Domain.Blog
@using Core.ViewModel.Catalog
@using Core.Wrappers
@using System.Net
@using Newtonsoft.Json
@using UI.Server.Utils
@inject IJSRuntime js;


<div class="modal" tabindex="-1" role="dialog" id="categoryModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Cabecalho</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@postObject" formname="CategoryVM" OnValidSubmit="@HandleInValidSubmit">
                     <ValidationSummary />
                     @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @((MarkupString)errorMessage)
                        </div>
                    }
                    <div class="form-group mt-2 mb-2">
                         <label for="Nome">Name</label>
                         <input type="hidden" id="Id" @bind-value="@postObject.Id" />
                         <InputText id="Name" class="form-control" @bind-Value="@postObject.Name" />
                         <ValidationMessage For="@(() => postObject.Name)" />
                     </div>

                    <div class="form-group mt-2 mb-2">                        
                        <InputText id="Seo" class="form-control" @bind-Value="@postObject.Seo" />
                        <ValidationMessage For="@(() => postObject.Seo)" />
                    </div>

                    <BlazoredTextEditor @ref="@richEditor" >
                        <ToolbarContent>
                             <select class="ql-header">
                                 <option selected=""></option>
                                 <option value="1"></option>
                                 <option value="2"></option>
                                 <option value="3"></option>
                                 <option value="4"></option>
                                 <option value="5"></option>
                             </select>
                             <span class="ql-formats">
                                 <button class="ql-bold"></button>
                                 <button class="ql-italic"></button>
                                 <button class="ql-underline"></button>
                                 <button class="ql-strike"></button>
                             </span>
                             <span class="ql-formats">
                                 <select class="ql-color"></select>
                                 <select class="ql-background"></select>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-list" value="ordered"></button>
                                 <button class="ql-list" value="bullet"></button>
                             </span>
                             <span class="ql-formats">
                                 <button class="ql-link"></button>
                             </span>
                         </ToolbarContent>
                        <EditorContent>
                            @if (!string.IsNullOrEmpty(postObject.Html))
                            {
                                @postObject.Html
                            }
                        </EditorContent>
                     </BlazoredTextEditor>

                     <ValidationMessage For="@(() => postObject.Html)" />

                    

                     <button type="submit" class="btn btn-primary">Envia</button>
                     <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancela</button>
                 </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    [Parameter]
    public CategoryVM postObject { get; set; } = new CategoryVM();
    BlazoredTextEditor richEditor;//= default!;
    string htmlContent = string.Empty;
    [Parameter]
    public RenderFragment Cabecalho { get; set; }

    [Parameter]
    public Action AlteracaoDados { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    private readonly HttpClient _client = new HttpClient();

    private async Task CloseItemModal()
    {
        await js.InvokeAsync<object>("CloseModal", "categoryModal");
    }

    protected async override Task OnParametersSetAsync()
    {
        /// Load the content here based on the parameters
        try
        {
            if (postObject.Id != null && postObject.Id > 0 && !string.IsNullOrEmpty(postObject.Html))
            {
                htmlContent = postObject.Html;
                await richEditor.LoadContent(postObject.Html);
                //await richEditor.InsertText(postObject.Html);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Quill Exception: {ex}");
        }
    }

    public async Task HandleInValidSubmit(EditContext editContext)
    {        
        await UpdateDescription();
        var respose = new HttpResponseMessage();
        if(postObject.Id == 0){
            respose = await _client.PostAsJsonAsync($"{Configuration["Api.Gateway"]}catalog-gate/catalog/category/add", postObject);
        }
        else
        {
            respose = await _client.PostAsJsonAsync($"{Configuration["Api.Gateway"]}catalog-gate/catalog/category/update", postObject);
        }
        if (respose.StatusCode == HttpStatusCode.OK || respose.StatusCode == HttpStatusCode.Created)
        {
            errorMessage = null;
            await HandleSubmit();
        }
        else
        {
            errorMessage = new HandlerErrorMessage().BuildError(respose.Content.ReadAsStringAsync().Result, errorMessage);
            return;
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public async Task HandleSubmit()
    {        

        await CloseItemModal();
        AlteracaoDados?.Invoke();
    }
    public async Task UpdateDescription()
    {
        var raw = (MarkupString)await richEditor.GetHTML();
        postObject.Html = raw.Value;
        //StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _client.DefaultRequestHeaders.Add("Authorization", Configuration["SecretKeys.ApiKey"]);
    }
}