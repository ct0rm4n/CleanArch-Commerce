@page "/Admin/Products"
@using Core.Wrappers
@using Core.Entities.Abstract
@using Microsoft.AspNetCore.Components.QuickGrid
@using Newtonsoft.Json
@using Core.Entities.Domain
@using Core.ViewModel.Catalog

@inject IJSRuntime js;

@rendermode InteractiveServer
<PageTitle>Product list</PageTitle>
<h3>Product list</h3>


<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="row">
                        <div class="col-md-2">
                            <div class="search-box">
                                <input type="search" autofocus @bind="descFilter" @bind:event="oninput" placeholder="Search..." />
                            </div>
                        </div>
                        <div class="col-md-8">
                        </div>
                        <div class="col-md-2">
                            <a type="button" data-toggle="modal" data-target="#bannerModal"
                               class="btn btn-primary" @onclick="(() => InitializeAdd())">
                                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true" b-4knz10sgzz=""></span> Novo
                            </a>
                        </div>
                    </div>
                </div>
                @if (items == null)
                {
                    <p><em>Carregando...</em></p>
                }
                else
                {
                    <div class="card-body">
                        <table id="example" class="display" style="width:100%">
                            <thead>
                                <tr>
                                    <th>name</th>
                                    <th>Description</th>
                                   
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in items)
                                {
                                    <tr>
                                        <td>@(item.Title)</td>
                                        @* <td> <img src="data:image/jpeg;base64, @((MarkupString)item.Binary)" /></td> *@
                                        @* <td> *@
                                        @*     @(item.DateStart) *@
                                        @* </td> *@
                                        @* <td> *@
                                        @*     @(item.DateEnd) *@
                                        @* </td> *@
                                        @* <td>@(item.Publish)</td> *@
                                        <td>
                                            <Input type="button" class="btn btn-primary" @onclick="(() => PreparaEdicao(item))" data-toggle="modal" data-target="#postModal" value="Edita" />
                                            <input type="button" class="btn btn-danger" @onclick="(() => PreparaExclusao(item))" data-toggle="modal" data-target="#confirmaExclusaoModal" value="Deleta" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                @if (items is not null)
                                {
                                    @if (!string.IsNullOrEmpty(pPage))
                                    {
                                        <Input type="button" class="btn btn-primary" @onclick="(() => ChangePage(pPage))" value="Previous" />
                                    }
                                    @if (!string.IsNullOrEmpty(nPage))
                                    {
                                        <Input type="button" class="btn btn-primary" @onclick="(() => ChangePage(nPage))" value="Next" />
                                    }
                                }

                            </tfoot>
                        </table>

                    </div>
                }
            </div>
        </div>
    </div>
</div>

<ConfirmaDialog OnClick="@Delete" />


@code {
    [Inject]
    IConfiguration Configuration { get; set; }
    private readonly HttpClient _client = new HttpClient();
    private string DefaultUrl = string.Empty;

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    List<Product> items { get; set; }
    string cabecalho = string.Empty;
    string descFilter = string.Empty;
    string pPage= string.Empty;
    string nPage= string.Empty;
    
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    int PageIndex = 0;
    int TotalPages = 1;

    ProductVM bannerObject = new ProductVM();

    private async void Search()
    {
        await FilteredItems();
    }
    private async Task FilteredItems()
    {
        try
        {
            var result = items.AsQueryable();
            if (!string.IsNullOrEmpty(descFilter))
            {
                
                var respose = new PagedResponse<List<Product>>(null, 0, int.MaxValue);
                respose = await _client.GetFromJsonAsync<PagedResponse<List<Product>>>($"{DefaultUrl}Product/Search?filterText={descFilter}&?PageSize={pagination.ItemsPerPage}&PageIndex={PageIndex}");
                items = respose.Data;
                await BuildPagger(respose);
            }
        }
        catch (Exception ex)
        {


        }
    }
    
    private async Task ChangePage(string page)
    {
        try
        {
            var respose = new PagedResponse<List<Product>>(null, 0, int.MaxValue);
            respose = await _client.GetFromJsonAsync<PagedResponse<List<Product>>>($"{page}");
            items = respose.Data;
            await BuildPagger(respose);
        }
        catch (Exception ex)
        {

        }
    }
    private async Task BuildPagger(PagedResponse<List<Product>> respose)
    {
        if (respose.NextPage != null)
            nPage = respose.NextPage.ToString();
        if (respose.PreviousPage != null)
            pPage = respose.PreviousPage.ToString();
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            DefaultUrl = Configuration["Api.Gateway"];
            _client.DefaultRequestHeaders.Add("Authorization", Configuration["SecretKeys.ApiKey"]);
            var respose = new PagedResponse<List<Product>>(null, 0, int.MaxValue);
            if (items is null)
            {
                PageIndex = 1;

                respose = await _client.GetFromJsonAsync<PagedResponse<List<Product>>>($"{DefaultUrl}catalog-gate/catalog/Product/getall?PageSize={pagination.ItemsPerPage}&PageIndex={PageIndex}");
                items = respose.Data;

                await BuildPagger(respose);

            }
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            //logger
        }

    }
    private void OnTotalItemCountChanged(object sender, int? totalItemCount)
    {
        // Update UI based on totalItemCount
        if (totalItemCount.HasValue)
        {
            // TotalItemCount is available, update Paginator or other UI elements
        }
        else
        {
            // TotalItemCount is not yet available, handle accordingly (e.g., display loading indicator)
        }
    }
    private void InitializeAdd()
    {
        
        NavigationManager.NavigateTo("/admin/products/new");
    }

    private async void AlteracaoDados()
    {
        Thread.Sleep(2000);
        StateHasChanged();
    }

    private async Task Delete()
    {
        await js.InvokeAsync<object>("CloseModal", "confirmaExclusaoModal");

        bannerObject = new ProductVM();
    }

    private void PreparaEdicao(Product item)
    {
        cabecalho = "Edita Post";
        var obj = JsonConvert.SerializeObject(item);
        bannerObject = JsonConvert.DeserializeObject<ProductVM>(obj);
    }

    private void PreparaExclusao(Product item)
    {
        var obj = JsonConvert.SerializeObject(item);
        bannerObject = JsonConvert.DeserializeObject<ProductVM>(obj);
    }
}