@using Blazored.TextEditor
@using Core.ViewModel.Catalog
@using Core.ViewModel.Generic.Abstracts
@using Core.Wrappers
@using System.Net
@using Newtonsoft.Json
@using UI.Server.Utils
@inject IJSRuntime js;


<div class="modal" tabindex="-1" role="dialog" id="postModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Cabecalho</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@SettingsObject" formname="BlogPostVM" OnValidSubmit="@HandleInValidSubmit">
                     <ValidationSummary />
                     @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @((MarkupString)errorMessage)
                        </div>
                    }
                    <textarea id="Body" @bind="@SettingsObject.Body">
                    </textarea>

                     <button type="submit" class="btn btn-primary">Envia</button>
                     <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancela</button>
                 </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    [Parameter]
    public SettingsVM SettingsObject { get; set; } = new SettingsVM();
    
    [Parameter]
    public RenderFragment Cabecalho { get; set; }

    [Parameter]
    public Action AlteracaoDados { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    private readonly HttpClient _client = new HttpClient();

    private async Task CloseItemModal()
    {
        await js.InvokeAsync<object>("CloseModal", "postModal");
    }

    public async Task HandleInValidSubmit(EditContext editContext)
    {        
        var respose = new HttpResponseMessage();
        if(SettingsObject.Id == 0){
            respose = await _client.PostAsJsonAsync($"{Configuration["Api.Catalog"]}Settings/add", SettingsObject);
        }
        else
        {
            respose = await _client.PostAsJsonAsync($"{Configuration["Api.Catalog"]}Settings/update", SettingsObject);
        }
        if (respose.StatusCode == HttpStatusCode.OK || respose.StatusCode == HttpStatusCode.Created)
        {
            errorMessage = null;
            await HandleSubmit();
        }
        else
        {
            errorMessage = new HandlerErrorMessage().BuildError(respose.Content.ReadAsStringAsync().Result, errorMessage);
            return;
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public async Task HandleSubmit()
    {        

        await CloseItemModal();
        AlteracaoDados?.Invoke();
    }    
    protected override async Task OnInitializedAsync()
    {
        _client.DefaultRequestHeaders.Add("Authorization", Configuration["SecretKeys.ApiKey"]);
    }
}