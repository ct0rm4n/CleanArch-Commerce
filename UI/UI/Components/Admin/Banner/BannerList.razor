@page "/Admin/Banner"
@using Core.ViewModel.Banner
@using Core.Wrappers
@using Core.Entities.Abstract
@using Microsoft.AspNetCore.Components.QuickGrid
@using Newtonsoft.Json
@using Core.Entities.Domain.Banner
@inject IJSRuntime js;

@rendermode InteractiveServer
<PageTitle>Banner list</PageTitle>
<h3>Banner list</h3>


<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="row">
                        <div class="col-md-2">
                            <div class="search-box">
                                <input type="search" autofocus @bind="descFilter" @bind:event="oninput" placeholder="Search..." />
                            </div>
                        </div>
                        <div class="col-md-8">
                        </div>
                        <div class="col-md-2">
                            <a type="button" data-toggle="modal" data-target="#bannerModal"
                               class="btn btn-primary" @onclick="(() => InitializeItemObject())">
                                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true" b-4knz10sgzz=""></span> Novo
                            </a>
                        </div>
                    </div>
                </div>
                @if (items == null)
                {
                    <p><em>Carregando...</em></p>
                }
            </div>
        </div>
    </div>
</div>

<ConfirmaDialog OnClick="@Delete" />
<BannerDetails itemObject=bannerObject AlteracaoDados="@AlteracaoDados">
    <Cabecalho>@cabecalho</Cabecalho>
</BannerDetails>

@code {
    [Inject]
    IConfiguration Configuration { get; set; }
    private readonly HttpClient _client = new HttpClient();

    List<BannerVM> items;
    string cabecalho = string.Empty;
    string descFilter = string.Empty;
    string pPage = string.Empty;
    string nPage = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    int PageIndex = 0;
    int TotalPages = 1;

    BannerVM bannerObject = new BannerVM();

    private async void Search()
    {
        await FilteredItems();
    }
    private async Task FilteredItems()
    {
        try
        {
            var result = items.AsQueryable();
            if (!string.IsNullOrEmpty(descFilter))
            {
                string url = Configuration["Api.Catalog"];
                var respose = new PagedResponse<List<BannerVM>>(null, 0, int.MaxValue);
                respose = await _client.GetFromJsonAsync<PagedResponse<List<BannerVM>>>($"{url}Banner/Search?filterText={descFilter}&?PageSize={pagination.ItemsPerPage}&PageIndex={PageIndex}");
                items = respose.Data;
                await BuildPagger(respose);
            }
        }
        catch (Exception ex)
        {


        }
    }
    
    private async Task ChangePage(string page)
    {
        try
        {
            string url = Configuration["Api.Catalog"];
            var respose = new PagedResponse<List<BannerVM>>(null, 0, int.MaxValue);
            respose = await _client.GetFromJsonAsync<PagedResponse<List<BannerVM>>>($"{page}");
            items = respose.Data;
            await BuildPagger(respose);
        }
        catch (Exception ex)
        {

        }
    }
    private async Task BuildPagger(PagedResponse<List<BannerVM>> respose)
    {
        if (respose.NextPage != null)
            nPage = respose.NextPage.ToString();
        if (respose.PreviousPage != null)
            pPage = respose.PreviousPage.ToString();
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            string url = Configuration["Api.Catalog"];
            var respose = new PagedResponse<List<BannerVM>>(null, 0, int.MaxValue);
            if (items is null)
            {
                PageIndex = 1;

                respose = await _client.GetFromJsonAsync<PagedResponse<List<BannerVM>>>($"{url}BannerVM/getall?PageSize={pagination.ItemsPerPage}&PageIndex={PageIndex}");
                items = respose.Data;

                await BuildPagger(respose);

            }
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            //logger
        }

    }
    private void OnTotalItemCountChanged(object sender, int? totalItemCount)
    {
        // Update UI based on totalItemCount
        if (totalItemCount.HasValue)
        {
            // TotalItemCount is available, update Paginator or other UI elements
        }
        else
        {
            // TotalItemCount is not yet available, handle accordingly (e.g., display loading indicator)
        }
    }
    private void InitializeItemObject()
    {
        bannerObject = new BannerVM();
        bannerObject.Start = DateTime.Now;
        bannerObject.End = (DateTime.Now).AddYears(2);
        cabecalho = "Nova Post";
    }

    private async void AlteracaoDados()
    {
        Thread.Sleep(2000);
        StateHasChanged();
    }

    private async Task Delete()
    {
        await js.InvokeAsync<object>("CloseModal", "confirmaExclusaoModal");

        bannerObject = new BannerVM();
    }

    private void PreparaEdicao(Banner item)
    {
        cabecalho = "Edita Post";
        var obj = JsonConvert.SerializeObject(item);
        bannerObject = JsonConvert.DeserializeObject<BannerVM>(obj);
    }

    private void PreparaExclusao(Banner item)
    {
        var obj = JsonConvert.SerializeObject(item);
        bannerObject = JsonConvert.DeserializeObject<BannerVM>(obj);
    }
}