@inject IJSRuntime js;
@using Blazored.TextEditor
@using Core.ViewModel.Banner
@using System.Net
@using UI.Server.Utils


@rendermode InteractiveServer

<div class="modal" tabindex="-1" role="dialog" id="bannerModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Cabecalho</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@itemObject" formname="bannerVM" EditContext="@editContext"
                           OnValidSubmit="@HandleSubmit" enctype="multipart/form-data">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @((MarkupString)errorMessage)
                        </div>
                    }
                    <div class="form-group mt-2 mb-2">
                        <label for="Nome">Title</label>
                         <input type="hidden" id="Id" @bind-value="@itemObject.Id" />
                         <InputText id="Name" class="form-control" @bind-Value="@itemObject.Title" />
                        <ValidationMessage For="@(() => itemObject.Title)" />
                    </div>
                    <div class="form-group mt-2 mb-2">
                        <label for="Nome">Url</label>
                        <InputText id="Url" class="form-control" @bind-Value="@itemObject.Url" />
                        <ValidationMessage For="@(() => itemObject.Url)" />
                    </div>
                    <div class="form-group mt-2 mb-2">
                         <label for="Nome">Selecione até 5 arquivo(s):</label>
                        <InputFile @bind-Value="@itemObject.Binary" class="form-control" OnChange="@SelectFiles" multiple />
                         <ValidationMessage For="@(() => itemObject.Binary)" />
                     </div>
                    <div class="form-group mb-3 mt-3">
                        <label for="ConclusaoEm">Inicio em : </label>
                        <input id="ConclusaoEm" type="date" name="math" @bind-value="@itemObject.DateStart" />
                        <ValidationMessage For="@(() => itemObject.DateStart)" />
                    </div>
                    <div class="form-group mb-3 mt-3">
                        <label for="ConclusaoEm">Possui fim ? </label>
                        <input id="ConclusaoEm" type="date" name="math" @bind-value="@itemObject.DateStart" />
                        <ValidationMessage For="@(() => itemObject.DateStart)" />
                    </div>
                    <button type="submit" class="btn btn-primary">Envia</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancela</button>
                </EditForm>
                
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;
    private EditContext editContext;
    List<IBrowserFile> arquivos ;
    int tamanhoMaximoArquivo = 1 * 1024 * 1024;
    BannerVM arquivoUpload = new BannerVM();


    [Inject]
    IConfiguration Configuration { get; set; }

    private readonly HttpClient _client = new HttpClient();

    [Parameter]
    public BannerVM itemObject { get; set; } = new BannerVM();
    [Parameter]
    public RenderFragment Cabecalho { get; set; }

    [Parameter]
    public Action AlteracaoDados { get; set; }


    private async Task CloseItemModal()
    {
        await js.InvokeAsync<object>("CloseModal", "bannerModal");
    }


    private async Task SelectFiles(InputFileChangeEventArgs e)
    {
        arquivos = e.GetMultipleFiles(tamanhoMaximoArquivo).ToList();
        var file = arquivos.FirstOrDefault();
        try
        {
            if (file is not null)
            {
                var buffer = new byte[file.Size];
                using (var stream = file.OpenReadStream())
                {
                    await stream.ReadAsync(buffer, 0, buffer.Length);
                }
                itemObject.Binary = Convert.ToBase64String(buffer);
            }
        }catch(Exception ex)
        {
            return;
        }
    }

    private async Task HandleSubmit()
    {
        var erro = false;
        var extensoesPermitidas = new string[] { ".png", ".jpg", ".jpeg", ".gif", ".bmp" };
        int contador = 0;        
        try
        {
            var respose = new HttpResponseMessage();
            if (itemObject.Id == null)
            {

                respose = await _client.PostAsJsonAsync($"{Configuration["Api.Gateway"]}catalog-gate/catalog/Banner/add", itemObject);
            }
            else
            {
                respose = await _client.PostAsJsonAsync($"{Configuration["Api.Gateway"]}catalog-gate/catalog/Banner/update", itemObject);
            }
            if (respose.StatusCode == HttpStatusCode.OK || respose.StatusCode == HttpStatusCode.Created)
            {
                errorMessage = null;
                return;
            }
            else
            {
                errorMessage = new HandlerErrorMessage().BuildError(respose.Content.ReadAsStringAsync().Result, errorMessage);
                return;
            }
        }
        catch (Exception ex)
        {
            erro = true;
            errorMessage = new HandlerErrorMessage().BuildError(null, ($"Message : {ex.Message} InnerException : {ex.InnerException}"));
        }
    }

    protected override async Task OnInitializedAsync()
    {        
        _client.DefaultRequestHeaders.Add("Authorization", Configuration["SecretKeys.ApiKey"]);
    }
}