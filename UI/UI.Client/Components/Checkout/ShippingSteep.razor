@using Core.Dto
@using Core.Entities.Domain.Address
@using Core.ViewModel.Address
@using Core.Wrappers
@using System.Text.RegularExpressions
@using Newtonsoft.Json
<h3>ShippingSteep</h3>

@if(Addresses != null)
{
    <button @onclick="@(() => add_new = !add_new)">Add new address</button>
    <table class="table">
        @foreach (var address in Addresses)
        {
            <tr>
                <td>
                    @address.ZipCode
                </td>
                <td>
                    @address.City
                </td>
                <td>
                    @address.Neighborhood
                </td>
            </tr>
        }
    </table>
    <div id="new_address" style="display: @(add_new is false ? "none" : "block")">
        <h5>new address</h5>
        <hr />
        <label>States</label>
        <input id="ZipCode" class="form-control" placeholder="ZipCode" @bind="ZipCode" @oninput="e => ZipCode = (getAddressByZipCode(e.Value.ToString()).Result)" />
        @if(listofStates != null){
            <select class="form-control" >
                @foreach (var state in listofStates)
                {
                    if (responseApi is not null && state.Uf == responseApi.State.Uf)
                    {
                        <option value="@state.Uf" selected>@state.Name</option>
                    }
                    else{
                        <option value="@state.Uf">@state.Name</option>
                    }

                }
            </select>
        }
        @if (listofCitys != null)
        {
            <label>City</label>
            <select class="form-control">
                @foreach (var city in listofCitys)
                {
                    if (responseApi is not null && city.Id == responseApi.City.Id)
                    {
                        <option value="@city.Name" selected>@city.Name</option>
                    }
                    else
                    {
                        <option value="@city.Name">@city.Name</option>
                    }

                }
            </select>
        }else{
            <label>City</label>
            <select class="form-control">
                <option value="select_state">--select state--</option>
            </select>
        }
    </div>
}

@code {

    public List<Address> Addresses { get; set; }

    public ResponseAddressVM responseApi { get; set; }

    public Address NewAddress { get; set; }

    public List<StatesVM> listofStates { get; set; }

    public List<CityVM> listofCitys { get; set; }

    public string ZipCode { get; set; }

    public bool add_new { get; set; } = false;

    protected override void OnInitialized()
    {
        Addresses = new List<Address>();
        if (Addresses.Count == 0)
        {
            add_new = true;
        }
    }

    public async Task<string> getAddressByZipCode(string zipCode)
    {        
        try
        {
            zipCode = RemoveSpecial(zipCode);
            if (zipCode.Length != 8)
                return zipCode;
             
            _client = new HttpClient();
            _client.DefaultRequestHeaders.Add("Authorization", Configuration["SecretKeys.ApiKey"]);
            var respose =  _client.GetFromJsonAsync<ResponseAddressVM>($"{Configuration["Api.Gateway"]}shipping-gate/shipping/getAddress/viacep?cep={zipCode}").Result;
            if (respose != null)
            {
                responseApi = respose;
                listofCitys = _client.GetFromJsonAsync<List<CityVM>>($"{Configuration["Api.Gateway"]}shipping-gate/shipping/CityByState?stateId={respose.State.Id}").Result;
                StateHasChanged();
            }           
            
        }
        catch (Exception ex)
        {
            return zipCode;
        }
        return zipCode;
    }

    public string RemoveSpecial(string input)
    {
        string pattern = @"[^a-zA-Z0-9\s]";
        string result = Regex.Replace(input, pattern, "");
        return result;
    }

    protected override async Task OnInitializedAsync()
    {
        var path = $"{Configuration["Api.Gateway"]}shipping-gate/shipping/getStates";
        _client.DefaultRequestHeaders.Add("Authorization", Configuration["SecretKeys.ApiKey"]);
        var respose = await _client.GetFromJsonAsync<List<StatesVM>>(path);
        listofStates = respose;
        await base.OnInitializedAsync();
    }

    [Inject]
    IConfiguration Configuration { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }


    [Inject]
    public IJSRuntime js { get; set; }

    public HttpClient _client = new HttpClient();
    
    public string token_jwt { get; set; }

   
}
